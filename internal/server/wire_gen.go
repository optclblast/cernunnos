// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"cernunnos/internal/pkg/config"
	"cernunnos/internal/pkg/logger"
	"cernunnos/internal/server/interface/controllers"
	"cernunnos/internal/server/interface/controllers/product"
	"cernunnos/internal/server/interface/controllers/reservation"
	"cernunnos/internal/server/interface/controllers/storage"
	"cernunnos/internal/usecase/repository"
	"cernunnos/internal/usecase/repository/products"
	"cernunnos/internal/usecase/repository/reservations"
	repository2 "cernunnos/internal/usecase/repository/storages"
	"database/sql"
	"log/slog"
)

// Injectors from wire.go:

func ProvideServer(c *config.Config) (*Server, func(), error) {
	logger := provideLogger(c)
	db, cleanup, err := repository.ProvideDatabaseConnection(c)
	if err != nil {
		return nil, nil, err
	}
	repositoryRepository := provideStoragesRepository(db)
	productsRepository := provideProductsRepository(db)
	storageController := storage.NewStorageController(logger, repositoryRepository, productsRepository)
	productController := product.NewProductController(logger, repositoryRepository, productsRepository)
	reservationsRepository := provideReservationsRepository(db)
	reservationController := reservation.NewReservationController(logger, reservationsRepository)
	rootController := controllers.NewRootController(storageController, productController, reservationController)
	server := newServer(c, logger, repositoryRepository, productsRepository, rootController)
	return server, func() {
		cleanup()
	}, nil
}

// wire.go:

func provideStoragesRepository(db *sql.DB) repository2.Repository {
	return repository2.NewRepository(db)
}

func provideProductsRepository(db *sql.DB) products.Repository {
	return products.NewRepository(db)
}

func provideReservationsRepository(db *sql.DB) reservations.Repository {
	return reservations.NewRepository(db)
}

func provideLogger(c *config.Config) *slog.Logger {
	return logger.NewLogger(logger.MapLevel(c.LogLevel))
}
