// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package server

import (
	"cernunnos/internal/pkg/config"
	"cernunnos/internal/pkg/logger"
	"cernunnos/internal/server/interface/controllers"
	"cernunnos/internal/server/interface/presenters"
	"cernunnos/internal/usecase/interactors"
	"cernunnos/internal/usecase/repository"
	"cernunnos/internal/usecase/repository/products"
	"cernunnos/internal/usecase/repository/reservations"
	repository2 "cernunnos/internal/usecase/repository/storages"
	"database/sql"
	"log/slog"
)

// Injectors from wire.go:

func ProvideServer(c *config.Config) (*Server, func(), error) {
	logger := provideLogger(c)
	productPresenter := presenters.NewProductPresenter()
	db, cleanup, err := repository.ProvideDatabaseConnection(c)
	if err != nil {
		return nil, nil, err
	}
	productsRepository := provideProductsRepository(db)
	productInteractor := interactors.NewProductInteractor(logger, productsRepository)
	productController := controllers.NewProductController(logger, productPresenter, productInteractor)
	reservationsRepository := provideReservationsRepository(db)
	reservationInteractor := interactors.NewReservationInteractor(logger, reservationsRepository)
	reservationPresenter := presenters.NewReservationPresenter()
	reservationController := controllers.NewReservationController(logger, reservationInteractor, reservationPresenter)
	repositoryRepository := provideStoragesRepository(db)
	storageInteractor := interactors.NewStorageInteractor(logger, repositoryRepository)
	storagePresenter := presenters.NewStoragePresenter()
	storageController := controllers.NewStorageController(logger, storageInteractor, storagePresenter)
	rootController := controllers.NewRootController(productController, reservationController, storageController)
	server := newServer(c, logger, rootController)
	return server, func() {
		cleanup()
	}, nil
}

// wire.go:

func provideStoragesRepository(db *sql.DB) repository2.Repository {
	return repository2.NewRepository(db)
}

func provideProductsRepository(db *sql.DB) products.Repository {
	return products.NewRepository(db)
}

func provideReservationsRepository(db *sql.DB) reservations.Repository {
	return reservations.NewRepository(db)
}

func provideLogger(c *config.Config) *slog.Logger {
	return logger.NewLogger(logger.MapLevel(c.LogLevel))
}
